const pk: Function;
secret sk: Function;
inversekeys (pk,sk);

hashfunction hash;
usertype UID, Timestamp, Amount;
const a: Amount;

macro IDt = hash(a, r, IDc, IDm);
macro Sm = {hash(C, IDm, a, r)}sk(M);
macro Sc = {hash(B, IDc, IDm, a, r, Sm)}sk(C);
//Have to include Sm in Sc. Why? Important for the protocol?
macro Sb = {hash(M, IDt, a, r, t)}sk(B);

protocol BaseCaseProtocol(M, C, B)
{
	role M
	{
		fresh r: Nonce;
		fresh IDm: UID;
		var IDc, IDm: UID;
		var t: Timestamp;

		send_1 (M, C, IDm, a, r, Sm);

		recv_3 (B,M, IDt, a, r, t, Sb);

		claim (M, Nisynch);
	}

	role C
	{
		fresh IDc: UID;
		var r: Nonce;
		var IDm: UID;

		recv_1 (M, C, IDm, a, r, Sm);

		send_2 (C, B, IDc, IDm, a, r, Sm, Sc);
		claim (C, Nisynch);
	}

	role B
	{
		var IDm, IDc: UID;
		var r: Nonce;

		recv_2 (C, B, IDc, IDm, a, r, Sm, Sc);

		fresh t: Timestamp;
		send_3 (B,M, IDt, a, r, t, Sb);

		claim (B, Nisynch);
	}
}